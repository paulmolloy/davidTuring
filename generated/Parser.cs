/*----------------------------------------------------------------------
Compiler Generator Coco/R,
Copyright (c) 1990, 2004 Hanspeter Moessenboeck, University of Linz
extended by M. Loeberbauer & A. Woess, Univ. of Linz
with improvements by Pat Terry, Rhodes University

This program is free software; you can redistribute it and/or modify it 
under the terms of the GNU General Public License as published by the 
Free Software Foundation; either version 2, or (at your option) any 
later version.

This program is distributed in the hope that it will be useful, but 
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License 
for more details.

You should have received a copy of the GNU General Public License along 
with this program; if not, write to the Free Software Foundation, Inc., 
59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

As an exception, it is allowed to write an extension of Coco/R that is
used as a plugin in non-free software.

If not otherwise stated, any source code generated by Coco/R (other than 
Coco/R itself) does not fall under the GNU General Public License.
-----------------------------------------------------------------------*/

using System;

namespace Tastier {



public class Parser {
	public const int _EOF = 0;
	public const int _number = 1;
	public const int _ident = 2;
	public const int _string = 3;
	public const int maxT = 50;

	const bool T = true;
	const bool x = false;
	const int minErrDist = 2;
	
	public Scanner scanner;
	public Errors  errors;

	public Token t;    // last recognized token
	public Token la;   // lookahead token
	int errDist = minErrDist;

const int // object kinds
      var = 0, proc = 1, constant = 3;

   const int // types
      undef = 0, integer = 1, boolean = 2;

   const int // sort
      scalar = 0, arrayOne = 1, arrayTwo = 2;

   public SymbolTable tab;
   public CodeGenerator gen;
  
/*-------------------------------------------------------------------------------------------*/



	public Parser(Scanner scanner) {
		this.scanner = scanner;
		errors = new Errors();
	}

	void SynErr (int n) {
		if (errDist >= minErrDist) errors.SynErr(la.line, la.col, n);
		errDist = 0;
	}

	public void SemErr (string msg) {
		if (errDist >= minErrDist) errors.SemErr(t.line, t.col, msg);
		errDist = 0;
	}
	
	void Get () {
		for (;;) {
			t = la;
			la = scanner.Scan();
			if (la.kind <= maxT) { ++errDist; break; }

			la = t;
		}
	}
	
	void Expect (int n) {
		if (la.kind==n) Get(); else { SynErr(n); }
	}
	
	bool StartOf (int s) {
		return set[s, la.kind];
	}
	
	void ExpectWeak (int n, int follow) {
		if (la.kind == n) Get();
		else {
			SynErr(n);
			while (!StartOf(follow)) Get();
		}
	}


	bool WeakSeparator(int n, int syFol, int repFol) {
		int kind = la.kind;
		if (kind == n) {Get(); return true;}
		else if (StartOf(repFol)) {return false;}
		else {
			SynErr(n);
			while (!(set[syFol, kind] || set[repFol, kind] || set[0, kind])) {
				Get();
				kind = la.kind;
			}
			return StartOf(syFol);
		}
	}

	
	void AddOp(out Op op) {
		op = Op.ADD; 
		if (la.kind == 4) {
			Get();
		} else if (la.kind == 5) {
			Get();
			op = Op.SUB; 
		} else SynErr(51);
	}

	void Expr(out int reg,        // load value of Expr into register
out int type) {
		int typeR, regR; Op op; 
		SimExpr(out reg,
out type);
		if (StartOf(1)) {
			RelOp(out op);
			SimExpr(out regR,
out typeR);
			if (type == typeR) {
			  type = boolean;
			  gen.RelOp(op, reg, regR);
			}
			else SemErr("incompatible types");
			
		}
		gen.ClearRegisters(); 
	}

	void SimExpr(out int reg,     //load value of SimExpr into register
out int type) {
		int typeR, regR; Op op; 
		Term(out reg,
out type);
		while (la.kind == 4 || la.kind == 5) {
			AddOp(out op);
			Term(out regR,
out typeR);
			if (type == integer && typeR == integer)
			  gen.AddOp(op, reg, regR);
			else SemErr("integer type expected");
			
		}
	}

	void RelOp(out Op op) {
		op = Op.EQU; 
		switch (la.kind) {
		case 22: {
			Get();
			break;
		}
		case 23: {
			Get();
			op = Op.LSS; 
			break;
		}
		case 24: {
			Get();
			op = Op.GTR; 
			break;
		}
		case 25: {
			Get();
			op = Op.NEQ; 
			break;
		}
		case 26: {
			Get();
			op = Op.LEQ; 
			break;
		}
		case 27: {
			Get();
			op = Op.GEQ; 
			break;
		}
		default: SynErr(52); break;
		}
	}

	void Primary(out int reg,     // load Primary into register
out int type) {
		int n; Obj obj; string name; Obj mObj=null; string mname; int mtype = undef;
		type = undef;
		reg = gen.GetRegister();
		
		switch (la.kind) {
		case 2: {
			Ident(out name);
			int idxReg; int idxType; 
			obj = tab.Find(name); type = obj.type;
			
			if (la.kind == 6 || la.kind == 9) {
				if (la.kind == 6) {
					Get();
					Expr(out idxReg,
out idxType);
					int idx2Reg; int idx2Type;
					if(obj.sort != arrayOne && obj.sort != arrayTwo)
					SemErr("can only index arrays");
					else if(idxType != integer)
					SemErr("can only index arrays by integers");
					
					if (la.kind == 7) {
						Get();
						if (obj.kind == var || obj.kind == constant) {
						 if (obj.level == 0)
						    gen.LoadIndexedGlobal(reg, obj.adr, idxReg, name);
						 else
						    gen.LoadIndexedLocal(reg, tab.curLevel-obj.level, obj.adr, idxReg,  name);
						 if (type == boolean)
						 // reset Z flag in CPSR
						    gen.ResetZ(reg);
						}
						else SemErr("variable expected");	
						
					} else if (la.kind == 8) {
						Get();
						Expr(out idx2Reg,
out idx2Type);
						Expect(7);
						if(idxType != integer)
						SemErr("can only index arrays by integers");
						if (obj.kind == var || obj.kind == constant) {
						     			if (obj.level == 0)
						        			gen.LoadTwoIndexedGlobal(reg, obj.adr, idxReg, idx2Reg, obj.arrSize, name);//TODO: Add index 2
						     			else
						        			gen.LoadTwoIndexedLocal(reg, tab.curLevel-obj.level, obj.adr, idxReg, idx2Reg, obj.arrSize, name); //TODO Add index 2
						     			if (type == boolean)
						     				// reset Z flag in CPSR
						        			gen.ResetZ(reg);
						  		}
						  		else SemErr("variable expected");	
						
					} else SynErr(53);
				} else {
					Get();
					Ident(out mname);
					mObj = tab.Find(mname); mtype = mObj.type;  
				}
			}
			if(mObj==null){
			if(obj.sort == scalar){
			                      if (obj.kind == var || obj.kind == constant) {
			                       if (obj.level == 0)
			                          gen.LoadGlobal(reg, obj.adr, name);
			                       else
			                          gen.LoadLocal(reg, tab.curLevel-obj.level, obj.adr, name);
			                       if (mtype == boolean)
			                       // reset Z flag in CPSR
			                          gen.ResetZ(reg);
			                      } else SemErr("variable expected");
			}
			} else if(mObj.parent == obj.name){
			if(mObj.sort == scalar){
			type = mtype;
			                    	   if (mObj.kind == var || mObj.kind == constant) {
			                       		if (mObj.level == 0)
			                          		gen.LoadGlobal(reg, mObj.adr, name);
			                       		else
			                          		gen.LoadLocal(reg, tab.curLevel-mObj.level, mObj.adr, name);
			Console.WriteLine("; ." + mObj.name);	
			                       	   	if (mtype == boolean)
			                       		// reset Z flag in CPSR
			                        	  gen.ResetZ(reg);
			                    	   } else SemErr("variable expected");
			}	
			} else
			SemErr("Var not member of struct.");
			                
			break;
		}
		case 1: {
			Get();
			type = integer;
			n = Convert.ToInt32(t.val);
			gen.LoadConstant(reg, n);
			
			break;
		}
		case 5: {
			Get();
			Primary(out reg,
out type);
			if (type == integer)
			  gen.NegateValue(reg);
			else SemErr("integer type expected");
			
			break;
		}
		case 10: {
			Get();
			type = boolean;
			gen.LoadTrue(reg);
			
			break;
		}
		case 11: {
			Get();
			type = boolean;
			gen.LoadFalse(reg);
			
			break;
		}
		case 12: {
			Get();
			Expr(out reg,
out type);
			Expect(13);
			break;
		}
		default: SynErr(54); break;
		}
	}

	void Ident(out string name) {
		Expect(2);
		name = t.val; 
	}

	void String(out string text) {
		Expect(3);
		text = t.val; 
	}

	void MulOp(out Op op) {
		op = Op.MUL; 
		if (la.kind == 14) {
			Get();
		} else if (la.kind == 15 || la.kind == 16) {
			if (la.kind == 15) {
				Get();
			} else {
				Get();
			}
			op = Op.DIV; 
		} else if (la.kind == 17 || la.kind == 18) {
			if (la.kind == 17) {
				Get();
			} else {
				Get();
			}
			op = Op.MOD; 
		} else SynErr(55);
	}

	void ProcDecl(string progName) {
		Obj obj; string procName; 
		Expect(19);
		Ident(out procName);
		obj = tab.NewObj(procName, proc, undef);
		if (procName == "main")
		  if (tab.curLevel == 0)
		     tab.mainPresent = true;
		  else SemErr("main not at lexic level 0");
		tab.OpenScope();
		
		Expect(12);
		Expect(13);
		Expect(20);
		while (la.kind == 46 || la.kind == 47) {
			VarDecl();
		}
		while (la.kind == 19) {
			ProcDecl(progName);
		}
		if (procName == "main")
		  gen.Label("Main", "Body");
		else {
		  gen.ProcNameComment(procName);
		  gen.Label(procName, "Body");
		}
		
		while (StartOf(2)) {
			if (StartOf(3)) {
				Stat();
			} else if (la.kind == 49) {
				ConstDecl();
			} else {
				VarDecl();
			}
		}
		Expect(21);
		if (procName == "main") {
		  gen.StopProgram(progName);
		  gen.Enter("Main", tab.curLevel, tab.topScope.nextAdr);
		} else {
		  gen.Return(procName);
		  gen.Enter(procName, tab.curLevel, tab.topScope.nextAdr);
		}
		tab.CloseScope();
		
	}

	void VarDecl() {
		string name; int type; int size; 
		Type(out type);
		Ident(out name);
		if (la.kind == 8 || la.kind == 29) {
			while (la.kind == 8) {
				Get();
				tab.NewObj(name, var, type); 
				Ident(out name);
			}
			Expect(29);
			tab.NewObj(name, var, type); 
		} else if (la.kind == 6) {
			Get();
			ArrDeclPart(out size);
			int totalSize = 0; 
			if(size<0) SemErr("array size must be > 0");
			totalSize += size;  
			
			if (la.kind == 8) {
				Get();
				ArrDeclPart(out size);
				Expect(41);
				if(size<0) SemErr("array size must be > 0");
				totalSize *= size; 
				tab.NewObj(name, var, type, arrayTwo, totalSize, size);
				
			} else if (la.kind == 41) {
				Get();
				tab.NewObj(name, var, type, arrayOne, totalSize, size); 
			} else SynErr(56);
		} else SynErr(57);
	}

	void Stat() {
		int type; string name; Obj obj; int reg; string membername; 
		switch (la.kind) {
		case 2: {
			Ident(out name);
			obj = tab.Find(name); 
			
			
			if (la.kind == 28) {
				Get();
				if(obj.parent != "")
				SemErr("Cannot assign var to non-initialized variable. (Hint: " + obj.parent + " struct has " + name + " as a member variable.)");
				if(obj.kind==constant)
				SemErr("Cannot assign a new val to a constant.");
				if (obj.kind != var)
				  SemErr("cannot assign to procedure");
				
				Expr(out reg,
out type);
				if (la.kind == 29) {
					Get();
					if (type == obj.type)
					  if (obj.level == 0)
					     gen.StoreGlobal(reg, obj.adr, name);
					  else gen.StoreLocal(reg, tab.curLevel-obj.level, obj.adr, name);
					else SemErr("incompatible types");
					
				} else if (la.kind == 30) {
					Get();
					int l1, l2; l1 = 0;
					             if (type == boolean) {
					                l1 = gen.NewLabel();
					                gen.BranchFalse(l1);
					             }
					             else SemErr("boolean type expected");
					          
					Expr(out reg,
out type);
					l2 = gen.NewLabel();
					gen.Branch(l2);
					gen.Label(l1);
					
					Expect(31);
					Expr(out reg,
out type);
					gen.Label(l2); 
					Expect(29);
				} else SynErr(58);
			} else if (la.kind == 9) {
				Get();
				Ident(out membername);
				Obj mobj = tab.Find(membername); 
				Expect(28);
				if(mobj.parent == "")
				SemErr("Var is not member of struct");
				if(mobj.parent != obj.name)
				SemErr("Var is not member of struct");
				if(obj.kind==constant)
				SemErr("Cannot assign a new val to a constant.");
				 	if (obj.kind != var)
				    		SemErr("cannot assign to procedure");
				
				Expr(out reg,
out type);
				if (la.kind == 29) {
					Get();
					if (type == mobj.type)
					  if (mobj.level == 0)
					     gen.StoreGlobal(reg, mobj.adr, membername);
					  else gen.StoreLocal(reg, tab.curLevel-mobj.level, mobj.adr, membername);
					else SemErr("incompatible types");
					
				} else if (la.kind == 30) {
					Get();
					int l1, l2; l1 = 0;
					             if (type == boolean) {
					                l1 = gen.NewLabel();
					                gen.BranchFalse(l1);
					             }
					             else SemErr("boolean type expected");
					          
					Expr(out reg,
out type);
					l2 = gen.NewLabel();
					gen.Branch(l2);
					gen.Label(l1);
					
					Expect(31);
					Expr(out reg,
out type);
					gen.Label(l2); 
					Expect(29);
				} else SynErr(59);
			} else if (la.kind == 12) {
				Get();
				Expect(13);
				Expect(29);
				if (obj.kind == proc)
				  gen.Call(name);
				else SemErr("object is not a procedure");
				
			} else if (la.kind == 6) {
				Get();
				int idxType; int idxReg;
				if(obj.sort != arrayOne && obj.sort != arrayTwo)
				SemErr("error can only index arrays.");
				
				Expr(out idxReg, 
out idxType);
				int idx2Reg; int idx2Type; 
				if(idxType != integer)
				SemErr("Array indexes must be integers");
				
				if (la.kind == 7) {
					Get();
					Expect(28);
					Expr(out reg,
 out type);
					Expect(29);
					if (type == obj.type)
					  if (obj.level == 0)
					gen.StoreIndexedGlobal(reg, obj.adr, idxReg, name);
					  else  gen.StoreIndexedLocal(reg, tab.curLevel-obj.level, obj.adr, idxReg, name);
					//gen.StoreLocal(reg, tab.curLevel-obj.level, obj.adr, name);
					else SemErr("incompatible types");
					
				} else if (la.kind == 8) {
					Get();
					Expr(out idx2Reg, 
out idx2Type);
					Expect(7);
					Expect(28);
					Expr(out reg,
 out type);
					Expect(29);
					if (type == obj.type)
					  if (obj.level == 0)
					gen.StoreTwoIndexedGlobal(reg, obj.adr, idxReg, idx2Reg, obj.arrSize, name);
					  else  gen.StoreTwoIndexedLocal(reg, tab.curLevel-obj.level, obj.adr, idxReg, idx2Reg, obj.arrSize, name); //Add second index.
					//gen.StoreLocal(reg, tab.curLevel-obj.level, obj.adr, name);
					else SemErr("incompatible types");
					
				} else SynErr(60);
			} else SynErr(61);
			break;
		}
		case 32: {
			Get();
			int cReg, cType, vReg, vType, tReg;
			Console.WriteLine("; Switch statement:");
			gen.GetRegister();
			gen.GetRegister();
			
			Expr(out cReg,
out cType);
			Expect(20);
			if (cType != boolean && cType != integer) 
			SemErr("boolean or integer type expected");
			
			int endSwitchL = gen.NewLabel(); 
			int nextL = gen.NewLabel();
			int curL = 0;
			
			
			while (la.kind == 33) {
				Get();
				Expr(out vReg,
out vType);
				Expect(31);
				if(vType != cType)
				 SemErr("switch and case values are not the same type"); 
				curL = nextL;
				gen.Label(curL); 
				Console.WriteLine("; case");
				gen.GetRegister();
				tReg = gen.GetRegister(); 
				Console.WriteLine("; Use copy of the condition for each compare so the original isn't overwritten during the compare.");
				gen.MoveRegister(tReg, cReg); 
				gen.RelOp(Op.EQU, tReg, vReg);
				nextL = gen.NewLabel();
				gen.BranchFalse(nextL);
				int stmtL = gen.NewLabel();
				gen.BranchTrue(stmtL);
				
				gen.GetRegister();
						
				if (la.kind == 33) {
					Get();
					Expr(out vReg,
out vType);
					Expect(31);
				}
				if(vType != cType)
				 SemErr("switch and case values are not the same type"); 
				curL = nextL;
				gen.Label(curL); 
				Console.WriteLine("; case consecutive");
				gen.GetRegister();
				tReg = gen.GetRegister(); 
				Console.WriteLine("; Use copy of the condition for each compare so the original isn't overwritten during the compare.");
				gen.MoveRegister(tReg, cReg); 
				gen.RelOp(Op.EQU, tReg, vReg);
				nextL = gen.NewLabel();
				gen.BranchFalse(nextL);
				gen.BranchTrue(stmtL);
				gen.GetRegister();
				
				
				gen.Label(stmtL);
				Console.WriteLine("; Statments start.");
				
				while (StartOf(3)) {
					Stat();
				}
				while (la.kind == 34) {
					Get();
					Expect(29);
				}
				Console.WriteLine("; Break;");
				gen.Branch(endSwitchL);
				
			}
			if (la.kind == 35) {
				Get();
				Expect(31);
				curL = nextL;
				gen.Label(curL);
				Console.WriteLine("; Default case:"); 
				
				Console.WriteLine("; Statments start:"); 
				while (StartOf(3)) {
					Stat();
				}
				while (la.kind == 34) {
					Get();
					Expect(29);
				}
			}
			Expect(21);
			gen.Label(endSwitchL); 
			
			break;
		}
		case 36: {
			Get();
			int l1, l2; l1 = 0; 
			Expr(out reg,
out type);
			if (type == boolean) {
			  l1 = gen.NewLabel();
			  gen.BranchFalse(l1);
			}
			else SemErr("boolean type expected");
			
			Stat();
			l2 = gen.NewLabel();
			gen.Branch(l2);
			gen.Label(l1);
			
			if (la.kind == 37) {
				Get();
				Stat();
			}
			gen.Label(l2); 
			break;
		}
		case 38: {
			Get();
			int l1, l2;
			l1 = gen.NewLabel();
			gen.Label(l1); l2=0;
			
			Expr(out reg,
out type);
			if (type == boolean) {
			  l2 = gen.NewLabel();
			  gen.BranchFalse(l2);
			}
			else SemErr("boolean type expected");
			
			Stat();
			gen.Branch(l1);
			gen.Label(l2);
			
			break;
		}
		case 39: {
			Get();
			Expect(12);
			Stat();
			Console.WriteLine("; For");
			int l1, l2;
			l1 = gen.NewLabel();
			gen.Label(l1); l2=0;	
			
			Expr(out reg, 
out type);
			Expect(29);
			Console.WriteLine("; Condition:");
			if(type == boolean) {
			l2 = gen.NewLabel();
			gen.BranchFalse(l2);
			}	
			else SemErr("boolean type expected");
			 
			Stat();
			Expect(13);
			Console.WriteLine("; Inside For:");
			
			Stat();
			gen.Branch(l1);	
			gen.Label(l2);
			Console.WriteLine("; End For");
			
			
			break;
		}
		case 40: {
			Get();
			Ident(out name);
			Expect(20);
			Console.WriteLine("; Start Struct " + name);
			tab.NewObj(name, var, undef);	
			
			while (la.kind == 46 || la.kind == 47) {
				Type(out type);
				string mname;  int size; 
				Ident(out mname);
				if (la.kind == 8 || la.kind == 29) {
					while (la.kind == 8) {
						Get();
						tab.NewObj(mname, var, type, name); 
						Ident(out mname);
					}
					Expect(29);
					tab.NewObj(mname, var, type, name);
					Console.WriteLine("; Member " + mname); 		
					
				} else if (la.kind == 6) {
					Get();
					ArrDeclPart(out size);
					int totalSize = 0; 
					if(size<0) SemErr("array size must be > 0");
					totalSize += size;  
					
					if (la.kind == 8) {
						Get();
						ArrDeclPart(out size);
						Expect(41);
						if(size<0) SemErr("array size must be > 0");
						totalSize *= size; 
						tab.NewObj(mname, var, type, arrayTwo, totalSize, size, name);
						
					} else if (la.kind == 41) {
						Get();
						tab.NewObj(mname, var, type, arrayOne, totalSize, size, name); 	
						Console.WriteLine("; Member " + mname);
						
					} else SynErr(62);
				} else SynErr(63);
			}
			Expect(21);
			Console.WriteLine("; End Struct"); 
			break;
		}
		case 42: {
			Get();
			Ident(out name);
			Expect(29);
			obj = tab.Find(name);
			if (obj.type == integer) {
			  gen.ReadInteger(); 
			  if (obj.level == 0)
			     gen.StoreGlobal(0, obj.adr, name);
			  else gen.StoreLocal(0, tab.curLevel-obj.level, obj.adr, name);
			}
			else SemErr("integer type expected");
			
			break;
		}
		case 43: {
			Get();
			string text; 
			if (StartOf(4)) {
				Expr(out reg,
out type);
				switch (type) {
				  case integer: gen.WriteInteger(reg, false);
				                break; 
				  case boolean: gen.WriteBoolean(false);
				                break;
				}
				
			} else if (la.kind == 3) {
				String(out text);
				gen.WriteString(text); 
			} else SynErr(64);
			Expect(29);
			break;
		}
		case 44: {
			Get();
			Expr(out reg,
out type);
			switch (type) {
			  case integer: gen.WriteInteger(reg, true);
			                break;
			  case boolean: gen.WriteBoolean(true);
			                break;
			}
			
			Expect(29);
			break;
		}
		case 20: {
			Get();
			tab.OpenSubScope(); 
			while (la.kind == 46 || la.kind == 47) {
				VarDecl();
			}
			Stat();
			while (StartOf(3)) {
				Stat();
			}
			Expect(21);
			tab.CloseSubScope(); 
			break;
		}
		default: SynErr(65); break;
		}
	}

	void ConstDecl() {
		int type; string name; Obj obj; int reg; 
		Expect(49);
		Ident(out name);
		Expect(22);
		Expr(out reg,
out type);
		Expect(29);
		tab.NewObj(name, constant, type);
		obj = tab.Find(name); 
		                     if (obj.kind != constant)
		                        SemErr("cannot do const assign to non constant");
		
		                     if (type == obj.type)
		                        if (obj.level == 0)
		                           gen.StoreGlobal(reg, obj.adr, name);
		                        else gen.StoreLocal(reg, tab.curLevel-obj.level, obj.adr, name);
		                     else SemErr("incompatible types");
		                  
	}

	void Term(out int reg,        // load value of Term into register
out int type) {
		int typeR, regR; Op op; 
		Primary(out reg,
out type);
		while (StartOf(5)) {
			MulOp(out op);
			Primary(out regR,
out typeR);
			if (type == integer && typeR == integer)
			  gen.MulOp(op, reg, regR);
			else SemErr("integer type expected");
			
		}
	}

	void Type(out int type) {
		type = undef; 
		if (la.kind == 46) {
			Get();
			type = integer; 
		} else if (la.kind == 47) {
			Get();
			type = boolean; 
		} else SynErr(66);
	}

	void ArrDeclPart(out int size) {
		size = 0; int type; 
		Expect(48);
		Expect(1);
		size = Convert.ToInt32(t.val); 
	}

	void Tastier() {
		string progName; 
		Expect(45);
		Ident(out progName);
		tab.OpenScope(); 
		Expect(20);
		while (la.kind == 46 || la.kind == 47 || la.kind == 49) {
			if (la.kind == 46 || la.kind == 47) {
				VarDecl();
			} else {
				ConstDecl();
			}
		}
		while (la.kind == 19) {
			ProcDecl(progName);
		}
		tab.CloseScope(); 
		Expect(21);
	}



	public void Parse() {
		la = new Token();
		la.val = "";		
		Get();
		Tastier();
		Expect(0);

	}
	
	static readonly bool[,] set = {
		{T,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x},
		{x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,T,T, T,T,T,T, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x},
		{x,x,T,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, T,x,x,x, x,x,x,x, x,x,x,x, T,x,x,x, T,x,T,T, T,x,T,T, T,x,T,T, x,T,x,x},
		{x,x,T,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, T,x,x,x, x,x,x,x, x,x,x,x, T,x,x,x, T,x,T,T, T,x,T,T, T,x,x,x, x,x,x,x},
		{x,T,T,x, x,T,x,x, x,x,T,T, T,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x},
		{x,x,x,x, x,x,x,x, x,x,x,x, x,x,T,T, T,T,T,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x}

	};
} // end Parser


public class Errors {
	public int count = 0;                                    // number of errors detected
    public System.IO.TextWriter errorStream = Console.Error; // error messages go to this stream - was Console.Out DMA
    public string errMsgFormat = "-- line {0} col {1}: {2}"; // 0=line, 1=column, 2=text

	public virtual void SynErr (int line, int col, int n) {
		string s;
		switch (n) {
			case 0: s = "EOF expected"; break;
			case 1: s = "number expected"; break;
			case 2: s = "ident expected"; break;
			case 3: s = "string expected"; break;
			case 4: s = "\"+\" expected"; break;
			case 5: s = "\"-\" expected"; break;
			case 6: s = "\"[\" expected"; break;
			case 7: s = "\"]\" expected"; break;
			case 8: s = "\",\" expected"; break;
			case 9: s = "\".\" expected"; break;
			case 10: s = "\"true\" expected"; break;
			case 11: s = "\"false\" expected"; break;
			case 12: s = "\"(\" expected"; break;
			case 13: s = "\")\" expected"; break;
			case 14: s = "\"*\" expected"; break;
			case 15: s = "\"div\" expected"; break;
			case 16: s = "\"DIV\" expected"; break;
			case 17: s = "\"mod\" expected"; break;
			case 18: s = "\"MOD\" expected"; break;
			case 19: s = "\"void\" expected"; break;
			case 20: s = "\"{\" expected"; break;
			case 21: s = "\"}\" expected"; break;
			case 22: s = "\"=\" expected"; break;
			case 23: s = "\"<\" expected"; break;
			case 24: s = "\">\" expected"; break;
			case 25: s = "\"!=\" expected"; break;
			case 26: s = "\"<=\" expected"; break;
			case 27: s = "\">=\" expected"; break;
			case 28: s = "\":=\" expected"; break;
			case 29: s = "\";\" expected"; break;
			case 30: s = "\"?\" expected"; break;
			case 31: s = "\":\" expected"; break;
			case 32: s = "\"switch\" expected"; break;
			case 33: s = "\"case\" expected"; break;
			case 34: s = "\"break\" expected"; break;
			case 35: s = "\"default\" expected"; break;
			case 36: s = "\"if\" expected"; break;
			case 37: s = "\"else\" expected"; break;
			case 38: s = "\"while\" expected"; break;
			case 39: s = "\"for\" expected"; break;
			case 40: s = "\"struct\" expected"; break;
			case 41: s = "\"];\" expected"; break;
			case 42: s = "\"read\" expected"; break;
			case 43: s = "\"write\" expected"; break;
			case 44: s = "\"writeln\" expected"; break;
			case 45: s = "\"program\" expected"; break;
			case 46: s = "\"int\" expected"; break;
			case 47: s = "\"bool\" expected"; break;
			case 48: s = "\"1..\" expected"; break;
			case 49: s = "\"const\" expected"; break;
			case 50: s = "??? expected"; break;
			case 51: s = "invalid AddOp"; break;
			case 52: s = "invalid RelOp"; break;
			case 53: s = "invalid Primary"; break;
			case 54: s = "invalid Primary"; break;
			case 55: s = "invalid MulOp"; break;
			case 56: s = "invalid VarDecl"; break;
			case 57: s = "invalid VarDecl"; break;
			case 58: s = "invalid Stat"; break;
			case 59: s = "invalid Stat"; break;
			case 60: s = "invalid Stat"; break;
			case 61: s = "invalid Stat"; break;
			case 62: s = "invalid Stat"; break;
			case 63: s = "invalid Stat"; break;
			case 64: s = "invalid Stat"; break;
			case 65: s = "invalid Stat"; break;
			case 66: s = "invalid Type"; break;

			default: s = "error " + n; break;
		}
		errorStream.WriteLine(errMsgFormat, line, col, s);
		count++;
	}

	public virtual void SemErr (int line, int col, string s) {
		errorStream.WriteLine(errMsgFormat, line, col, s);
		count++;
	}
	
	public virtual void SemErr (string s) {
		errorStream.WriteLine(s);
		count++;
	}
	
	public virtual void Warning (int line, int col, string s) {
		errorStream.WriteLine(errMsgFormat, line, col, s);
	}
	
	public virtual void Warning(string s) {
		errorStream.WriteLine(s);
	}
} // Errors


public class FatalError: Exception {
	public FatalError(string m): base(m) {}
}
}